// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package mapperclient

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type AWSOperation struct {
	Resource string   `json:"resource"`
	Actions  []string `json:"actions"`
	SrcIp    string   `json:"srcIp"`
}

// GetResource returns AWSOperation.Resource, and is useful for accessing the field via an interface.
func (v *AWSOperation) GetResource() string { return v.Resource }

// GetActions returns AWSOperation.Actions, and is useful for accessing the field via an interface.
func (v *AWSOperation) GetActions() []string { return v.Actions }

// GetSrcIp returns AWSOperation.SrcIp, and is useful for accessing the field via an interface.
func (v *AWSOperation) GetSrcIp() string { return v.SrcIp }

// __reportAWSOperationInput is used internally by genqlient
type __reportAWSOperationInput struct {
	Operation []AWSOperation `json:"operation"`
}

// GetOperation returns __reportAWSOperationInput.Operation, and is useful for accessing the field via an interface.
func (v *__reportAWSOperationInput) GetOperation() []AWSOperation { return v.Operation }

// reportAWSOperationResponse is returned by reportAWSOperation on success.
type reportAWSOperationResponse struct {
	ReportAWSOperation bool `json:"reportAWSOperation"`
}

// GetReportAWSOperation returns reportAWSOperationResponse.ReportAWSOperation, and is useful for accessing the field via an interface.
func (v *reportAWSOperationResponse) GetReportAWSOperation() bool { return v.ReportAWSOperation }

func reportAWSOperation(
	ctx context.Context,
	client graphql.Client,
	operation []AWSOperation,
) (*reportAWSOperationResponse, error) {
	req := &graphql.Request{
		OpName: "reportAWSOperation",
		Query: `
mutation reportAWSOperation ($operation: [AWSOperation!]!) {
	reportAWSOperation(operation: $operation)
}
`,
		Variables: &__reportAWSOperationInput{
			Operation: operation,
		},
	}
	var err error

	var data reportAWSOperationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
